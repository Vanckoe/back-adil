{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"PostsData\",\n  data() {\n    return {\n      text: 'some text',\n      baseUrl: 'https://jsonplaceholder.typicode.com/posts/',\n      posts: [],\n      countBeforeUpdate: 0,\n      countUpdated: 0\n    };\n  },\n  methods: {},\n  beforeCreate() {\n    console.log(this.text, 'beforeCreate');\n  },\n  async created() {\n    try {\n      const {\n        status,\n        data\n      } = await axios.get(this.baseUrl);\n      if (status === 200) {\n        this.posts = data;\n      }\n    } catch (e) {\n      console.log(e.response);\n    }\n  },\n  beforeMount() {\n    console.log(this.text, 'beforeMount');\n  },\n  // mounted() {\n  //   setTimeout(() => {\n  //     this.posts.push({id: 4, title: 'Post4'})\n  //   }, 10000)\n  // },\n  // beforeUpdate() {\n  //   console.log(this.countBeforeUpdate += 1, 'beforeUpdate')\n  //   this.posts.splice(0, 1)\n  // },\n  // updated() {\n  //   console.log(this.countUpdated +=1, 'updated')\n  // },\n  beforeUnmount() {\n    this.posts = [];\n    console.log('beforeUnmount');\n  },\n  unmounted() {\n    console.log('unmounted');\n  },\n  computed: {\n    postsComputed() {\n      let newPosts = [];\n      for (let key in this.posts) {\n        newPosts[key] = {\n          id: this.posts[key].id,\n          title: this.posts[key].title,\n          url: this.baseUrl + this.posts[key].id,\n          body: this.posts[key].body.slice(0, 20),\n          userId: this.posts[key].userId\n        };\n      }\n      return newPosts;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","text","baseUrl","posts","countBeforeUpdate","countUpdated","methods","beforeCreate","console","log","created","status","get","e","response","beforeMount","beforeUnmount","unmounted","computed","postsComputed","newPosts","key","id","title","url","body","slice","userId"],"sources":["C:\\Users\\Vanckoe\\OneDrive\\Documents\\work\\Noncomercial\\lara\\crud\\src\\views\\PostsData.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Посты преподавателей университета международного бизнеса</h2>\r\n    <table class=\"table table-dark table-striped\">\r\n      <thead>\r\n      <tr>\r\n        <th scope=\"col\">ID пользователя</th>\r\n        <th scope=\"col\">ID поста</th>\r\n        <th scope=\"col\">Заголовок поста</th>\r\n        <th scope=\"col\">Контент поста</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr v-for=\"(post, index) in postsComputed\" :key=\"index\">\r\n        <td>{{post.userId}}</td>\r\n        <td>{{post.id}}</td>\r\n        <td>{{ post.title }}</td>\r\n        <td>{{post.body}} <RouterLink :to=\"'post/' + post.id + '/user/' + post.userId\">...</RouterLink></td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n<!--    <ul>-->\r\n<!--      <li v-for=\"(post, index) in postsComputed\" :key=\"index\">id: {{ post.id }}, title: {{ post.title }}-->\r\n<!--        <RouterLink :to=\"'post/' + post.id \">перейти</RouterLink>-->\r\n<!--      </li>-->\r\n<!--    </ul>-->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"PostsData\",\r\n  data() {\r\n    return {\r\n      text: 'some text',\r\n      baseUrl: 'https://jsonplaceholder.typicode.com/posts/',\r\n      posts: [],\r\n      countBeforeUpdate: 0,\r\n      countUpdated: 0\r\n    }\r\n  },\r\n  methods: {},\r\n  beforeCreate() {\r\n    console.log(this.text, 'beforeCreate')\r\n  },\r\n  async created() {\r\n    try {\r\n      const {status, data} = await axios.get(this.baseUrl);\r\n      if (status === 200) {\r\n        this.posts = data\r\n      }\r\n    } catch (e) {\r\n      console.log(e.response)\r\n    }\r\n  },\r\n  beforeMount() {\r\n    console.log(this.text, 'beforeMount')\r\n  },\r\n  // mounted() {\r\n  //   setTimeout(() => {\r\n  //     this.posts.push({id: 4, title: 'Post4'})\r\n  //   }, 10000)\r\n  // },\r\n  // beforeUpdate() {\r\n  //   console.log(this.countBeforeUpdate += 1, 'beforeUpdate')\r\n  //   this.posts.splice(0, 1)\r\n  // },\r\n  // updated() {\r\n  //   console.log(this.countUpdated +=1, 'updated')\r\n  // },\r\n  beforeUnmount() {\r\n    this.posts = []\r\n    console.log('beforeUnmount')\r\n  },\r\n  unmounted() {\r\n    console.log('unmounted')\r\n  },\r\n\r\n  computed: {\r\n    postsComputed() {\r\n      let newPosts = []\r\n      for (let key in this.posts) {\r\n        newPosts[key] = {id: this.posts[key].id, title: this.posts[key].title,\r\n          url: this.baseUrl + this.posts[key].id,\r\n          body: this.posts[key].body.slice(0,20),\r\n          userId: this.posts[key].userId\r\n        }\r\n      }\r\n      return newPosts\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"AA8BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,WAAW;MACjBC,OAAO,EAAE,6CAA6C;MACtDC,KAAK,EAAE,EAAE;MACTC,iBAAiB,EAAE,CAAC;MACpBC,YAAY,EAAE;IAChB;EACF,CAAC;EACDC,OAAO,EAAE,CAAC,CAAC;EACXC,YAAYA,CAAA,EAAG;IACbC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,IAAI,EAAE,cAAc;EACvC,CAAC;EACD,MAAMS,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,MAAM;QAACC,MAAM;QAAEX;MAAI,IAAI,MAAMF,KAAK,CAACc,GAAG,CAAC,IAAI,CAACV,OAAO,CAAC;MACpD,IAAIS,MAAK,KAAM,GAAG,EAAE;QAClB,IAAI,CAACR,KAAI,GAAIH,IAAG;MAClB;IACF,EAAE,OAAOa,CAAC,EAAE;MACVL,OAAO,CAACC,GAAG,CAACI,CAAC,CAACC,QAAQ;IACxB;EACF,CAAC;EACDC,WAAWA,CAAA,EAAG;IACZP,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,IAAI,EAAE,aAAa;EACtC,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAe,aAAaA,CAAA,EAAG;IACd,IAAI,CAACb,KAAI,GAAI,EAAC;IACdK,OAAO,CAACC,GAAG,CAAC,eAAe;EAC7B,CAAC;EACDQ,SAASA,CAAA,EAAG;IACVT,OAAO,CAACC,GAAG,CAAC,WAAW;EACzB,CAAC;EAEDS,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,IAAIC,QAAO,GAAI,EAAC;MAChB,KAAK,IAAIC,GAAE,IAAK,IAAI,CAAClB,KAAK,EAAE;QAC1BiB,QAAQ,CAACC,GAAG,IAAI;UAACC,EAAE,EAAE,IAAI,CAACnB,KAAK,CAACkB,GAAG,CAAC,CAACC,EAAE;UAAEC,KAAK,EAAE,IAAI,CAACpB,KAAK,CAACkB,GAAG,CAAC,CAACE,KAAK;UACnEC,GAAG,EAAE,IAAI,CAACtB,OAAM,GAAI,IAAI,CAACC,KAAK,CAACkB,GAAG,CAAC,CAACC,EAAE;UACtCG,IAAI,EAAE,IAAI,CAACtB,KAAK,CAACkB,GAAG,CAAC,CAACI,IAAI,CAACC,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC;UACtCC,MAAM,EAAE,IAAI,CAACxB,KAAK,CAACkB,GAAG,CAAC,CAACM;QAC1B;MACF;MACA,OAAOP,QAAO;IAChB;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}