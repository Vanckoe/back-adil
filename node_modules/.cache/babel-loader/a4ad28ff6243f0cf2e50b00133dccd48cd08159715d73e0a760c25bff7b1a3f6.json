{"ast":null,"code":"export default {\n  data() {\n    return {\n      categories: [],\n      newCategoryName: '',\n      isAdmin: false,\n      selectedCategory: null\n    };\n  },\n  // created() {\n  //   this.checkUserRoleAndLoadCategories();\n  // },\n  methods: {\n    // async checkUserRoleAndLoadCategories() {\n    //   const token = localStorage.getItem('authToken');\n    //   if (!token) return;\n\n    //   try {\n    //     const rolesResponse = await this.$http.get('/roles', {\n    //       headers: { 'Authorization': `Bearer ${localStorage.getItem('authToken')}` }\n    //     })\n\n    //     this.isAdmin = rolesResponse.data.some(role => role.name === 'Admin');\n    //     this.loadCategories();\n    //   } catch (error) {\n    //     console.error('Ошибка при проверке роли пользователя:', error);\n    //   }\n    // },\n    async loadCategories() {\n      try {\n        const response = await this.$http.get('/category/categories');\n        this.categories = response.data;\n      } catch (error) {\n        console.error('Ошибка загрузки категорий:', error);\n      }\n    },\n    async addCategory() {\n      const token = localStorage.getItem('authToken');\n      try {\n        await this.$http.post('/category/categories', {\n          name: this.newCategoryName\n        }, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        this.loadCategories();\n        this.newCategoryName = '';\n      } catch (error) {\n        if (error.response.status === 409) {\n          alert('Категория с таким именем уже существует');\n        } else {\n          console.error('Ошибка добавления категории:', error);\n        }\n      }\n    },\n    startEditCategory(category) {\n      this.selectedCategory = {\n        ...category\n      };\n    },\n    async confirmEditCategory() {\n      const token = localStorage.getItem('authToken');\n      try {\n        await this.$http.put(`/category/categories/${this.selectedCategory.id}`, {\n          name: this.selectedCategory.name\n        }, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        this.loadCategories();\n        this.selectedCategory = null;\n      } catch (error) {\n        console.error('Ошибка редактирования категории:', error);\n      }\n    },\n    cancelEditCategory() {\n      this.selectedCategory = null;\n    },\n    async deleteCategory(id) {\n      const token = localStorage.getItem('authToken');\n      try {\n        await this.$http.delete(`/category/categories/${id}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        this.loadCategories();\n      } catch (error) {\n        console.error('Ошибка удаления категории:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","categories","newCategoryName","isAdmin","selectedCategory","methods","loadCategories","response","$http","get","error","console","addCategory","token","localStorage","getItem","post","name","headers","status","alert","startEditCategory","category","confirmEditCategory","put","id","cancelEditCategory","deleteCategory","delete"],"sources":["C:\\Users\\Vanckoe\\OneDrive\\Documents\\work\\Noncomercial\\lara\\crud\\src\\views\\CategoryData.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Категории</h1>\r\n    <div v-if=\"isAdmin\">\r\n      <input type=\"text\" v-model=\"newCategoryName\" placeholder=\"Название новой категории\">\r\n      <button @click=\"addCategory\">Добавить Категорию</button>\r\n    </div>\r\n    <ul>\r\n      <li v-for=\"category in categories\" :key=\"category.id\">\r\n        {{ category.name }}\r\n        <div v-if=\"isAdmin\">\r\n          <button @click=\"startEditCategory(category)\">Изменить</button>\r\n          <button @click=\"deleteCategory(category.id)\">Удалить</button>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    <div v-if=\"selectedCategory\">\r\n      <input type=\"text\" v-model=\"selectedCategory.name\">\r\n      <button @click=\"confirmEditCategory\">Сохранить изменения</button>\r\n      <button @click=\"cancelEditCategory\">Отменить</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      categories: [],\r\n      newCategoryName: '',\r\n      isAdmin: false,\r\n      selectedCategory: null,\r\n    };\r\n  },\r\n  // created() {\r\n  //   this.checkUserRoleAndLoadCategories();\r\n  // },\r\n  methods: {\r\n    // async checkUserRoleAndLoadCategories() {\r\n    //   const token = localStorage.getItem('authToken');\r\n    //   if (!token) return;\r\n\r\n    //   try {\r\n    //     const rolesResponse = await this.$http.get('/roles', {\r\n    //       headers: { 'Authorization': `Bearer ${localStorage.getItem('authToken')}` }\r\n    //     })\r\n\r\n    //     this.isAdmin = rolesResponse.data.some(role => role.name === 'Admin');\r\n    //     this.loadCategories();\r\n    //   } catch (error) {\r\n    //     console.error('Ошибка при проверке роли пользователя:', error);\r\n    //   }\r\n    // },\r\n    async loadCategories() {\r\n      try {\r\n        const response = await this.$http.get('/category/categories');\r\n        this.categories = response.data;\r\n      } catch (error) {\r\n        console.error('Ошибка загрузки категорий:', error);\r\n      }\r\n    },\r\n    async addCategory() {\r\n      const token = localStorage.getItem('authToken');\r\n      try {\r\n        await this.$http.post('/category/categories', {\r\n          name: this.newCategoryName\r\n        }, {\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        });\r\n        this.loadCategories();\r\n        this.newCategoryName = '';\r\n      } catch (error) {\r\n        if (error.response.status === 409) {\r\n          alert('Категория с таким именем уже существует');\r\n        } else {\r\n          console.error('Ошибка добавления категории:', error);\r\n        }\r\n      }\r\n    },\r\n    startEditCategory(category) {\r\n      this.selectedCategory = { ...category };\r\n    },\r\n    async confirmEditCategory() {\r\n      const token = localStorage.getItem('authToken');\r\n      try {\r\n        await this.$http.put(`/category/categories/${this.selectedCategory.id}`, {\r\n          name: this.selectedCategory.name\r\n        }, {\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        });\r\n        this.loadCategories();\r\n        this.selectedCategory = null;\r\n      } catch (error) {\r\n        console.error('Ошибка редактирования категории:', error);\r\n      }\r\n    },\r\n    cancelEditCategory() {\r\n      this.selectedCategory = null;\r\n    },\r\n    async deleteCategory(id) {\r\n      const token = localStorage.getItem('authToken');\r\n      try {\r\n        await this.$http.delete(`/category/categories/${id}`, {\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        });\r\n        this.loadCategories();\r\n      } catch (error) {\r\n        console.error('Ошибка удаления категории:', error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":"AAyBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,eAAe,EAAE,EAAE;MACnBC,OAAO,EAAE,KAAK;MACdC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACD;EACA;EACA;EACAC,OAAO,EAAE;IACP;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAM,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC,sBAAsB,CAAC;QAC7D,IAAI,CAACR,UAAS,GAAIM,QAAQ,CAACP,IAAI;MACjC,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACD,MAAME,WAAWA,CAAA,EAAG;MAClB,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAI;QACF,MAAM,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAC,sBAAsB,EAAE;UAC5CC,IAAI,EAAE,IAAI,CAACf;QACb,CAAC,EAAE;UACDgB,OAAO,EAAE;YAAE,eAAe,EAAG,UAASL,KAAM;UAAE;QAChD,CAAC,CAAC;QACF,IAAI,CAACP,cAAc,CAAC,CAAC;QACrB,IAAI,CAACJ,eAAc,GAAI,EAAE;MAC3B,EAAE,OAAOQ,KAAK,EAAE;QACd,IAAIA,KAAK,CAACH,QAAQ,CAACY,MAAK,KAAM,GAAG,EAAE;UACjCC,KAAK,CAAC,yCAAyC,CAAC;QAClD,OAAO;UACLT,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF;IACF,CAAC;IACDW,iBAAiBA,CAACC,QAAQ,EAAE;MAC1B,IAAI,CAAClB,gBAAe,GAAI;QAAE,GAAGkB;MAAS,CAAC;IACzC,CAAC;IACD,MAAMC,mBAAmBA,CAAA,EAAG;MAC1B,MAAMV,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAI;QACF,MAAM,IAAI,CAACP,KAAK,CAACgB,GAAG,CAAE,wBAAuB,IAAI,CAACpB,gBAAgB,CAACqB,EAAG,EAAC,EAAE;UACvER,IAAI,EAAE,IAAI,CAACb,gBAAgB,CAACa;QAC9B,CAAC,EAAE;UACDC,OAAO,EAAE;YAAE,eAAe,EAAG,UAASL,KAAM;UAAE;QAChD,CAAC,CAAC;QACF,IAAI,CAACP,cAAc,CAAC,CAAC;QACrB,IAAI,CAACF,gBAAe,GAAI,IAAI;MAC9B,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IACDgB,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAACtB,gBAAe,GAAI,IAAI;IAC9B,CAAC;IACD,MAAMuB,cAAcA,CAACF,EAAE,EAAE;MACvB,MAAMZ,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAI;QACF,MAAM,IAAI,CAACP,KAAK,CAACoB,MAAM,CAAE,wBAAuBH,EAAG,EAAC,EAAE;UACpDP,OAAO,EAAE;YAAE,eAAe,EAAG,UAASL,KAAM;UAAE;QAChD,CAAC,CAAC;QACF,IAAI,CAACP,cAAc,CAAC,CAAC;MACvB,EAAE,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}